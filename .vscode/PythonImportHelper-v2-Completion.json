[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_db_deteksi_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "db = client['data_db_deteksi_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['datkendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "db = client['datkendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "db = client['data_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_kendaraan_saya']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "db = client['data_kendaraan_saya']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "db = client['data_']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "db = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "db = client['data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240616161255",
        "description": ".history.app_20240616161255",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240616161255",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "db = client['data_jenis kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240616161301",
        "description": ".history.app_20240616161301",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240616161301",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "db = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240616161304",
        "description": ".history.app_20240616161304",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240616161304",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "db = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618215204",
        "description": ".history.app_20240618215204",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618215204",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis_kendaraa']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "db = client['data_jenis_kendaraa']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618215220",
        "description": ".history.app_20240618215220",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618215220",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "db = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618215222",
        "description": ".history.app_20240618215222",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618215222",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "db = client['jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618215224",
        "description": ".history.app_20240618215224",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618215224",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618215227",
        "description": ".history.app_20240618215227",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618215227",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "def save_to_mongodb(counter, collection, model, frame_count):\n    counts = counter.count_vehicles()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')\n    }",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220518",
        "description": ".history.app_20240618220518",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220518",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "def save_to_mongodb(counter, collection, model, frame_count):\n    counts = counter.count_vehicles()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')\n    }",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "db = client['data_db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220527",
        "description": ".history.app_20240618220527",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220527",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "def save_to_mongodb(counter, collection, frame_count):\n    # Dapatkan hasil hitungan kendaraan dari counter\n    counts = counter.get_counts()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220629",
        "description": ".history.app_20240618220629",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220629",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "def save_to_mongodb(counter, collection, frame_count):\n    # Dapatkan hasil hitungan kendaraan dari counter\n    counts = counter.get_counts()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['datadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "db = client['datadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220632",
        "description": ".history.app_20240618220632",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220632",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "def save_to_mongodb(counter, collection, frame_count):\n    # Dapatkan hasil hitungan kendaraan dari counter\n    counts = counter.get_counts()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220635",
        "description": ".history.app_20240618220635",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220635",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "def save_to_mongodb(counter, collection, frame_count):\n    # Dapatkan hasil hitungan kendaraan dari counter\n    counts = counter.get_counts()\n    timestamp = datetime.now()\n    document = {\n        \"frame_number\": frame_count,\n        \"deteksi\": counts,\n        \"date\": timestamp.strftime('%Y-%m-%d'),\n        \"hari\": timestamp.strftime('%A'),\n        \"time\": timestamp.strftime('%H:%M:%S')",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'deteksi', 'date', 'hari', 'time'}",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['ddb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "db = client['ddb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240618220637",
        "description": ".history.app_20240618220637",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220637",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts):\n    for track in tracks:\n        # Ambil titik tengah dari bounding box\n        x1, y1, x2, y2 = track.xyxy\n        center_x = (x1 + x2) / 2\n        center_y = (y1 + y2) / 2\n        # Periksa apakah titik tengah berada dalam ROI\n        if region_of_interest[0][1] < center_y < region_of_interest[1][1]:\n            if track.cls[0] in model.names:\n                class_name = model.names[track.cls[0]]",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220735",
        "description": ".history.app_20240618220735",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220735",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts):\n    for track in tracks:\n        # Ambil titik tengah dari bounding box\n        x1, y1, x2, y2 = track.xyxy\n        center_x = (x1 + x2) / 2\n        center_y = (y1 + y2) / 2\n        # Periksa apakah titik tengah berada dalam ROI\n        if region_of_interest[0][1] < center_y < region_of_interest[1][1]:\n            if track.cls[0] in model.names:\n                class_name = model.names[track.cls[0]]",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dddb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "db = client['dddb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220741",
        "description": ".history.app_20240618220741",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220741",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts):\n    for track in tracks:\n        # Ambil titik tengah dari bounding box\n        x1, y1, x2, y2 = track.xyxy[0]\n        center_x = (x1 + x2) / 2\n        center_y = (y1 + y2) / 2\n        # Periksa apakah titik tengah berada dalam ROI\n        if region_of_interest[0][1] < center_y < region_of_interest[1][1]:\n            if track.cls in model.names:\n                class_name = model.names[track.cls]",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220840",
        "description": ".history.app_20240618220840",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220840",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts):\n    for track in tracks:\n        # Ambil titik tengah dari bounding box\n        x1, y1, x2, y2 = track.xyxy[0]\n        center_x = (x1 + x2) / 2\n        center_y = (y1 + y2) / 2\n        # Periksa apakah titik tengah berada dalam ROI\n        if region_of_interest[0][1] < center_y < region_of_interest[1][1]:\n            if track.cls in model.names:\n                class_name = model.names[track.cls]",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "db = client['dbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220843",
        "description": ".history.app_20240618220843",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220843",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220945",
        "description": ".history.app_20240618220945",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220945",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dbbbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "db = client['dbbbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220948",
        "description": ".history.app_20240618220948",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220948",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dbbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "db = client['dbbb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618220950",
        "description": ".history.app_20240618220950",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618220950",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "def update_vehicle_count(tracks, region_in, region_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam region_in atau region_out\n            if region_in[0][1] < center_y < region_in[1][1]:",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest_in = [(20, 600), (1700, 604)]\nregion_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 604)]\nregion_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222034",
        "description": ".history.app_20240618222034",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222034",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "def update_vehicle_count(tracks, region_in, region_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam region_in atau region_out\n            if region_in[0][1] < center_y < region_in[1][1]:",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dsb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "db = client['dsb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest_in = [(20, 600), (1700, 604)]\nregion_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 604)]\nregion_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 564)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in, region_of_interest_out],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222039",
        "description": ".history.app_20240618222039",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222039",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "def update_vehicle_count(tracks, region_in_y, region_out_y, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam region_in atau region_out\n            if region_in_y[0] < center_y < region_in_y[1]:\n                if class_name in counts:",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest_in_y = (600, 604)\nregion_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in_y",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "region_of_interest_in_y = (600, 604)\nregion_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out_y",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "region_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222148",
        "description": ".history.app_20240618222148",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222148",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "def update_vehicle_count(tracks, region_in_y, region_out_y, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam region_in atau region_out\n            if region_in_y[0] < center_y < region_in_y[1]:\n                if class_name in counts:",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dbs_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "db = client['dbs_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest_in_y = (600, 604)\nregion_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in_y",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "region_of_interest_in_y = (600, 604)\nregion_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out_y",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "region_of_interest_out_y = (560, 564)\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in_y, region_of_interest_out_y],\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222152",
        "description": ".history.app_20240618222152",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222152",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222751",
        "description": ".history.app_20240618222751",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222751",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dbss_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "db = client['dbss_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618222755",
        "description": ".history.app_20240618222755",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618222755",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618223854",
        "description": ".history.app_20240618223854",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618223854",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dskb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "db = client['dskb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618223857",
        "description": ".history.app_20240618223857",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618223857",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618224642",
        "description": ".history.app_20240618224642",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618224642",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['adb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "db = client['adb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618224646",
        "description": ".history.app_20240618224646",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618224646",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618224708",
        "description": ".history.app_20240618224708",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618224708",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['adb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "db = client['adb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618224711",
        "description": ".history.app_20240618224711",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618224711",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618225533",
        "description": ".history.app_20240618225533",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618225533",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['sksdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "db = client['sksdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618225540",
        "description": ".history.app_20240618225540",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618225540",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['aadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "db = client['aadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 600), (1700, 560), (20, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618230325",
        "description": ".history.app_20240618230325",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618230325",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] < center_y < region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618230347",
        "description": ".history.app_20240618230347",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618230347",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] < center_y < region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['iadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "db = client['iadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618230352",
        "description": ".history.app_20240618230352",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618230352",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618231359",
        "description": ".history.app_20240618231359",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618231359",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['iidb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "db = client['iidb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer untuk menyimpan output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Inisialisasi Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618231406",
        "description": ".history.app_20240618231406",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618231406",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        required_columns = {'jenis_kendaraan', 'date', 'masuk', 'keluar', 'hari'}\n        if not required_columns.issubset(df.columns):\n            print(f\"Required columns are missing from data: {required_columns - set(df.columns)}\")",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618232204",
        "description": ".history.app_20240618232204",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618232204",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        required_columns = {'jenis_kendaraan', 'date', 'masuk', 'keluar', 'hari'}\n        if not required_columns.issubset(df.columns):\n            print(f\"Required columns are missing from data: {required_columns - set(df.columns)}\")",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['siidb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "db = client['siidb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Tentukan region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1], region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618232212",
        "description": ".history.app_20240618232212",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame video\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Lakukan tracking dengan model YOLO\n    results = model.track(im0, persist=True, show=False)\n    # Hitung dan visualisasikan lintasan serta update jumlah kendaraan masuk dan keluar",
        "detail": ".history.app_20240618232212",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Check if the center point is within the ROI for in or out\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if the video file exists",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if the video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open the video file\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Define the region of interest (ROI) for vehicles entering and exiting\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618233036",
        "description": ".history.app_20240618233036",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform tracking with YOLO model\n    results = model.track(im0, persist=True, show=False)\n    # Count and visualize tracks, and update counts of vehicles entering and exiting",
        "detail": ".history.app_20240618233036",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Check if the center point is within the ROI for in or out\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['asdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "db = client['asdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLO model initialization\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Absolute path to the video file\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if the video file exists",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if the video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open the video file\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Define the region of interest (ROI) for vehicles entering and exiting\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Initialize Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Dictionary to store detection counts per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618233040",
        "description": ".history.app_20240618233040",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Process each video frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform tracking with YOLO model\n    results = model.track(im0, persist=True, show=False)\n    # Count and visualize tracks, and update counts of vehicles entering and exiting",
        "detail": ".history.app_20240618233040",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618233847",
        "description": ".history.app_20240618233847",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618233847",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['ckdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "db = client['ckdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240618233851",
        "description": ".history.app_20240618233851",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240618233851",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "db = client['data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618234718",
        "description": ".history.app_20240618234718",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618234718",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dssu_ata_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "db = client['dssu_ata_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618234724",
        "description": ".history.app_20240618234724",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618234724",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Hanya menghitung label car dan truck\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['ssu_data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "db = client['ssu_data_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618234729",
        "description": ".history.app_20240618234729",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)",
        "detail": ".history.app_20240618234729",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for prediction in predictions:\n        for track in prediction:\n            for box in track.boxes:\n                x1, y1, x2, y2 = box.xyxy[0].tolist()\n                center_x = (x1 + x2) / 2\n                center_y = (y1 + y2) / 2",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618235534",
        "description": ".history.app_20240618235534",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240618235534",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for prediction in predictions:\n        for track in prediction:\n            for box in track.boxes:\n                x1, y1, x2, y2 = box.xyxy[0].tolist()\n                center_x = (x1 + x2) / 2\n                center_y = (y1 + y2) / 2",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['zdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "db = client['zdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618235547",
        "description": ".history.app_20240618235547",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240618235547",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for prediction in predictions:\n        for track in prediction:\n            for box in track.boxes:\n                x1, y1, x2, y2 = box.xyxy[0].tolist()\n                center_x = (x1 + x2) / 2\n                center_y = (y1 + y2) / 2",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618235734",
        "description": ".history.app_20240618235734",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240618235734",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for prediction in predictions:\n        for track in prediction:\n            for box in track.boxes:\n                x1, y1, x2, y2 = box.xyxy[0].tolist()\n                center_x = (x1 + x2) / 2\n                center_y = (y1 + y2) / 2",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['zzdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "db = client['zzdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240618235739",
        "description": ".history.app_20240618235739",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240618235739",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "def save_to_mongodb(tracks, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619000507",
        "description": ".history.app_20240619000507",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619000507",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "def save_to_mongodb(tracks, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['bbdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "db = client['bbdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619000519",
        "description": ".history.app_20240619000519",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619000519",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest_in, region_of_interest_out, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI masuk atau keluar\n            if region_of_interest_in[0][1] <= center_y <= region_of_interest_in[1][1]:",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "def save_to_mongodb(tracks, collection, model, region_of_interest_in, region_of_interest_out):\n    # Dictionary untuk menyimpan jumlah deteksi per label\n    detection_counts = {'car': {'in': 0, 'out': 0},\n                        'truck': {'in': 0, 'out': 0}}\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',\n                            'date', 'masuk', 'keluar', 'hari'}",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI) untuk kendaraan masuk dan keluar\nregion_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "region_of_interest_in",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "region_of_interest_in = [(20, 600), (1700, 600)]\nregion_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "region_of_interest_out",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "region_of_interest_out = [(20, 560), (1700, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002726",
        "description": ".history.app_20240619002726",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=[region_of_interest_in[0], region_of_interest_in[1],\n                 region_of_interest_out[1], region_of_interest_out[0]], classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002726",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for prediction in predictions.pred:\n        for det in prediction:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002730",
        "description": ".history.app_20240619002730",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002730",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for prediction in predictions.pred:\n        for det in prediction:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['aadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "db = client['aadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002735",
        "description": ".history.app_20240619002735",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002735",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for prediction in predictions.pred:\n        for det in prediction:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['aasdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "db = client['aasdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002739",
        "description": ".history.app_20240619002739",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002739",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002837",
        "description": ".history.app_20240619002837",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002837",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['abcdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "db = client['abcdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('yolov5s')  # Ganti dengan model yang sesuai\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619002843",
        "description": ".history.app_20240619002843",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619002843",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003012",
        "description": ".history.app_20240619003012",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619003012",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['cbadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "db = client['cbadb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Sesuaikan dengan path model YOLOv5 yang Anda miliki\nmodel_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003016",
        "description": ".history.app_20240619003016",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619003016",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003107",
        "description": ".history.app_20240619003107",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619003107",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions.pred:\n        for det in pred:\n            class_name = det['name']\n            if class_name in ['car', 'truck']:\n                document = {\n                    \"jenis_kendaraan\": class_name,\n                    \"deteksi\": 1,\n                    \"date\": datetime.now().strftime('%Y-%m-%d'),\n                    \"hari\": datetime.now().strftime('%A')",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['cdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "db = client['cdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Pastikan path ke model YOLOv5 yang benar\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003114",
        "description": ".history.app_20240619003114",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLO",
        "detail": ".history.app_20240619003114",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": datetime.now().strftime('%Y-%m-%d'),\n                \"hari\": datetime.now().strftime('%A')\n            }",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003229",
        "description": ".history.app_20240619003229",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLOv5",
        "detail": ".history.app_20240619003229",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": datetime.now().strftime('%Y-%m-%d'),\n                \"hari\": datetime.now().strftime('%A')\n            }",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter data untuk kendaraan jenis car dan truck\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Hitung jumlah deteksi per hari dan jenis kendaraan",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['edb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "db = client['edb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLOv5\n# Ganti dengan path absolut ke file yolov5s.pt\nmodel_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003233",
        "description": ".history.app_20240619003233",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Deteksi objek menggunakan model YOLOv5",
        "detail": ".history.app_20240619003233",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003329",
        "description": ".history.app_20240619003329",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003329",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003336",
        "description": ".history.app_20240619003336",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003336",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003406",
        "description": ".history.app_20240619003406",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003406",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asliideo2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asliideo2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003431",
        "description": ".history.app_20240619003431",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003431",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\ideo2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\ideo2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003434",
        "description": ".history.app_20240619003434",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003434",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\\\video2 (1).mp4ideo2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\\\video2 (1).mp4ideo2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003436",
        "description": ".history.app_20240619003436",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003436",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asliideo2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asliideo2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003442",
        "description": ".history.app_20240619003442",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003442",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003445",
        "description": ".history.app_20240619003445",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003445",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003457",
        "description": ".history.app_20240619003457",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003457",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003500",
        "description": ".history.app_20240619003500",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003500",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003505",
        "description": ".history.app_20240619003505",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003505",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003508",
        "description": ".history.app_20240619003508",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003508",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,\n                \"date\": timestamp.strftime('%Y-%m-%d'),\n                \"hari\": timestamp.strftime('%A')",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Filter for car and truck data\n        car_truck_data = df[df['jenis_kendaraan'].isin(['car', 'truck'])]\n        # Group by date and jenis_kendaraan, sum deteksi",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "db = client['fdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Initialize YOLOv5 model\nmodel_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "model_path = 'C:/path/to/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer for output\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003511",
        "description": ".history.app_20240619003511",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Function to save detections to MongoDB\ndef save_to_mongodb(predictions, collection):\n    timestamp = datetime.now()\n    for pred in predictions:\n        class_name = pred['name']\n        if class_name in ['car', 'truck']:\n            document = {",
        "detail": ".history.app_20240619003511",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003631",
        "description": ".history.app_20240619003631",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003631",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003643",
        "description": ".history.app_20240619003643",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003643",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4E: \\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2(1).mp4.exists(video_path):",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4E: \\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2(1).mp4.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "video_path = 'path/to/your/video.mp4E: \\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2(1).mp4.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003701",
        "description": ".history.app_20240619003701",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003701",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003704",
        "description": ".history.app_20240619003704",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003704",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003707",
        "description": ".history.app_20240619003707",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003707",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\nvideo_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "video_path = 'path/to/your/video.mp4'  # Replace with your video path\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003711",
        "description": ".history.app_20240619003711",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003711",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003720",
        "description": ".history.app_20240619003720",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003720",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003724",
        "description": ".history.app_20240619003724",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003724",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003727",
        "description": ".history.app_20240619003727",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003727",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "video_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003729",
        "description": ".history.app_20240619003729",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003729",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003732",
        "description": ".history.app_20240619003732",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003732",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003743",
        "description": ".history.app_20240619003743",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003743",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003746",
        "description": ".history.app_20240619003746",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003746",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6\\mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003749",
        "description": ".history.app_20240619003749",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003749",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003752",
        "description": ".history.app_20240619003752",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003752",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "model_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003754",
        "description": ".history.app_20240619003754",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003754",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "model_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003758",
        "description": ".history.app_20240619003758",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003758",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\nz",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "model_path = 'E:/A.coba/A.SEMESTER 6/mk pak ardi/strimlit asli/best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\nz\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003826",
        "description": ".history.app_20240619003826",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003826",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003833",
        "description": ".history.app_20240619003833",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003833",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003836",
        "description": ".history.app_20240619003836",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003836",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\n# Replace with your YOLOv5 model path\nmodel_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "model_path = 'E:\\A.SEMESTER 6\\mk pak ardi\\strimlit asli\\best.pt'\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003839",
        "description": ".history.app_20240619003839",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003839",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "def save_to_mongodb(predictions, collection):\n    # Dictionary for detection counts\n    detection_counts = {'car': 0, 'truck': 0}\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Increment count for car and truck detections\n            if class_name in detection_counts:\n                detection_counts[class_name] += 1",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "def export_to_csv(collection):\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check required columns\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}\n        if not required_columns.issubset(df.columns):",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "db = client['gdb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "collection = db['hasil_deteksi']\n# YOLOv5 model initialization\nmodel_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "model_path = 'path/to/your/yolov5s.pt'  # Replace with your YOLOv5 model path\ntry:\n    model = YOLO(model_path)\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Video file path\n# Replace with your video path\nvideo_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "video_path = 'E:/A.SEMESTER 6/mk pak ardi/strimlit asli/video2 (1).mp4'\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Open video capture\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), f\"Error opening video file {video_path}\"\n# Get video information\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n             cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n# Region of interest (ROI)\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer initialization\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Object counter initialization\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003842",
        "description": ".history.app_20240619003842",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Main processing loop\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    # Perform object detection",
        "detail": ".history.app_20240619003842",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240619003916",
        "description": ".history.app_20240619003916",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240619003916",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['dgb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "db = client['dgb_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240619003923",
        "description": ".history.app_20240619003923",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240619003923",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": ".history.app_20240619150145",
        "description": ".history.app_20240619150145",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": ".history.app_20240619150145",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "history_df = pd.read_csv('history.csv', index_col='Kategori')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "history_df = pd.read_csv('history.csv', index_col='Kategori')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                # Reset indeks setelah penghapusan\n                history_df.reset_index(drop=True, inplace=True)",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "df = load_data_from_mongodb()",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def draw_charts(df, history_df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def draw_charts(df, history_df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def draw_charts(df):\n    # Kode sebelumnya untuk menggambar diagram dan menampilkan tabel\n# Fungsi untuk menampilkan data history\ndef show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n# Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n# Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def draw_charts(df):\n    # Kode sebelumnya untuk menggambar diagram dan menampilkan tabel\n    # Fungsi untuk menampilkan data history\ndef show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n    # Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n    # Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/')\ndef home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/')\ndef home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161335",
        "description": ".history.my_streamlit_20240616161335",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240616161335",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161335",
        "description": ".history.my_streamlit_20240616161335",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240616161335",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161335",
        "description": ".history.my_streamlit_20240616161335",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240616161335",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161335",
        "description": ".history.my_streamlit_20240616161335",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240616161335",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240616161335",
        "description": ".history.my_streamlit_20240616161335",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240616161335",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161339",
        "description": ".history.my_streamlit_20240616161339",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240616161339",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161339",
        "description": ".history.my_streamlit_20240616161339",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240616161339",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161339",
        "description": ".history.my_streamlit_20240616161339",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240616161339",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240616161339",
        "description": ".history.my_streamlit_20240616161339",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240616161339",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240616161339",
        "description": ".history.my_streamlit_20240616161339",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240616161339",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220103",
        "description": ".history.my_streamlit_20240618220103",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618220103",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220103",
        "description": ".history.my_streamlit_20240618220103",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618220103",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220103",
        "description": ".history.my_streamlit_20240618220103",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618220103",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220103",
        "description": ".history.my_streamlit_20240618220103",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"db_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618220103",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618220103",
        "description": ".history.my_streamlit_20240618220103",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618220103",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220245",
        "description": ".history.my_streamlit_20240618220245",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618220245",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220245",
        "description": ".history.my_streamlit_20240618220245",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618220245",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220245",
        "description": ".history.my_streamlit_20240618220245",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618220245",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618220245",
        "description": ".history.my_streamlit_20240618220245",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"db_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618220245",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618220245",
        "description": ".history.my_streamlit_20240618220245",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618220245",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618221800",
        "description": ".history.my_streamlit_20240618221800",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618221800",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618221800",
        "description": ".history.my_streamlit_20240618221800",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618221800",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618221800",
        "description": ".history.my_streamlit_20240618221800",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618221800",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618221800",
        "description": ".history.my_streamlit_20240618221800",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"dbbb_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618221800",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618221800",
        "description": ".history.my_streamlit_20240618221800",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618221800",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618223615",
        "description": ".history.my_streamlit_20240618223615",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618223615",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618223615",
        "description": ".history.my_streamlit_20240618223615",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618223615",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618223615",
        "description": ".history.my_streamlit_20240618223615",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618223615",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618223615",
        "description": ".history.my_streamlit_20240618223615",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"dbss_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618223615",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618223615",
        "description": ".history.my_streamlit_20240618223615",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618223615",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618224524",
        "description": ".history.my_streamlit_20240618224524",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618224524",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618224524",
        "description": ".history.my_streamlit_20240618224524",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618224524",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618224524",
        "description": ".history.my_streamlit_20240618224524",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618224524",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618224524",
        "description": ".history.my_streamlit_20240618224524",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"dskb_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618224524",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618224524",
        "description": ".history.my_streamlit_20240618224524",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618224524",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618225410",
        "description": ".history.my_streamlit_20240618225410",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618225410",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618225410",
        "description": ".history.my_streamlit_20240618225410",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618225410",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618225410",
        "description": ".history.my_streamlit_20240618225410",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618225410",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618225410",
        "description": ".history.my_streamlit_20240618225410",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"adb_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618225410",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618225410",
        "description": ".history.my_streamlit_20240618225410",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618225410",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230142",
        "description": ".history.my_streamlit_20240618230142",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618230142",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230142",
        "description": ".history.my_streamlit_20240618230142",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618230142",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230142",
        "description": ".history.my_streamlit_20240618230142",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618230142",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230142",
        "description": ".history.my_streamlit_20240618230142",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"sksadb_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618230142",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618230142",
        "description": ".history.my_streamlit_20240618230142",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618230142",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230149",
        "description": ".history.my_streamlit_20240618230149",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240618230149",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230149",
        "description": ".history.my_streamlit_20240618230149",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240618230149",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230149",
        "description": ".history.my_streamlit_20240618230149",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240618230149",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240618230149",
        "description": ".history.my_streamlit_20240618230149",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"sksdb_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240618230149",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240618230149",
        "description": ".history.my_streamlit_20240618230149",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240618230149",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240619150427",
        "description": ".history.my_streamlit_20240619150427",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240619150427",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240619150427",
        "description": ".history.my_streamlit_20240619150427",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240619150427",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240619150427",
        "description": ".history.my_streamlit_20240619150427",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240619150427",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240619150427",
        "description": ".history.my_streamlit_20240619150427",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"db_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240619150427",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240619150427",
        "description": ".history.my_streamlit_20240619150427",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240619150427",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240620120451",
        "description": ".history.my_streamlit_20240620120451",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240620120451",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240620120451",
        "description": ".history.my_streamlit_20240620120451",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car']['masuk'].sum()\n    truck = df[df['jenis_kendaraan'] == 'truck']['masuk'].sum()\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240620120451",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240620120451",
        "description": ".history.my_streamlit_20240620120451",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240620120451",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240620120451",
        "description": ".history.my_streamlit_20240620120451",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"db_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240620120451",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240620120451",
        "description": ".history.my_streamlit_20240620120451",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240620120451",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "update_vehicle_count",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update_vehicle_count(tracks, region_of_interest, counts, model):\n    for track in tracks:\n        for box in track.boxes:\n            x1, y1, x2, y2 = box.xyxy[0].tolist()\n            center_x = (x1 + x2) / 2\n            center_y = (y1 + y2) / 2\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            # Periksa apakah titik tengah berada dalam ROI\n            if region_of_interest[0][1] < center_y < region_of_interest[1][1]:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_to_mongodb(counts, collection):\n    timestamp = datetime.now()\n    for class_name, count in counts.items():\n        document = {\n            \"jenis_kendaraan\": class_name,\n            \"masuk\": count['in'],\n            \"keluar\": count['out'],\n            \"date\": timestamp.strftime('%Y-%m-%d'),\n            \"hari\": timestamp.strftime('%A')\n        }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = client['db_jenis_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\n# Dictionary untuk menyimpan jumlah deteksi per label\ncounts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "counts = {'car': {'in': 0, 'out': 0}, 'truck': {'in': 0, 'out': 0}}\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    results = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, results)\n    video_writer.write(im0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car']['masuk'].sum()\n    truck = df[df['jenis_kendaraan'] == 'truck']['masuk'].sum()\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"db_jenis_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": "my_streamlit",
        "documentation": {}
    }
]