[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "object_counter",
        "importPath": "ultralytics.solutions",
        "description": "ultralytics.solutions",
        "isExtraImport": true,
        "detail": "ultralytics.solutions",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "path",
        "description": "path",
        "isExtraImport": true,
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_db_deteksi_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "db = client['data_db_deteksi_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609221336",
        "description": ".history.app_20240609221336",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609221336",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['datkendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "db = client['datkendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230908",
        "description": ".history.app_20240609230908",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230908",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "db = client['data_kendaraan']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230910",
        "description": ".history.app_20240609230910",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230910",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_kendaraan_saya']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "db = client['data_kendaraan_saya']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609230913",
        "description": ".history.app_20240609230913",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609230913",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['data_']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "db = client['data_']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609234759",
        "description": ".history.app_20240609234759",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609234759",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "db = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": ".history.app_20240609234806",
        "description": ".history.app_20240609234806",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": ".history.app_20240609234806",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609230840",
        "description": ".history.my_streamlit_20240609230840",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609230840",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609231310",
        "description": ".history.my_streamlit_20240609231310",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609231310",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"data_db_deteksi_kendaraan\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609232456",
        "description": ".history.my_streamlit_20240609232456",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609232456",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    colors = ['#ff0000', '#0000ff']",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609234913",
        "description": ".history.my_streamlit_20240609234913",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang diHalaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609234913",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609235903",
        "description": ".history.my_streamlit_20240609235903",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609235903",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240609235906",
        "description": ".history.my_streamlit_20240609235906",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240609235906",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000129",
        "description": ".history.my_streamlit_20240610000129",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000129",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000140",
        "description": ".history.my_streamlit_20240610000140",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000140",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000150",
        "description": ".history.my_streamlit_20240610000150",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000150",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000237",
        "description": ".history.my_streamlit_20240610000237",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000237",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000520",
        "description": ".history.my_streamlit_20240610000520",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000520",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610000538",
        "description": ".history.my_streamlit_20240610000538",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610000538",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001108",
        "description": ".history.my_streamlit_20240610001108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001133",
        "description": ".history.my_streamlit_20240610001133",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001133",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001310",
        "description": ".history.my_streamlit_20240610001310",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001310",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001323",
        "description": ".history.my_streamlit_20240610001323",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001323",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001326",
        "description": ".history.my_streamlit_20240610001326",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610001326",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001335",
        "description": ".history.my_streamlit_20240610001335",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610001335",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001422",
        "description": ".history.my_streamlit_20240610001422",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001422",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001609",
        "description": ".history.my_streamlit_20240610001609",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001609",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001619",
        "description": ".history.my_streamlit_20240610001619",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001619",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001811",
        "description": ".history.my_streamlit_20240610001811",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001811",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610001838",
        "description": ".history.my_streamlit_20240610001838",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610001838",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002047",
        "description": ".history.my_streamlit_20240610002047",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002047",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002133",
        "description": ".history.my_streamlit_20240610002133",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002133",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "history_df = pd.read_csv('history.csv', index_col='Kategori')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002145",
        "description": ".history.my_streamlit_20240610002145",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610002145",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "history_df = pd.read_csv('history.csv', index_col='Kategori')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002156",
        "description": ".history.my_streamlit_20240610002156",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610002156",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv')\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002238",
        "description": ".history.my_streamlit_20240610002238",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002238",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                # Reset indeks setelah penghapusan\n                history_df.reset_index(drop=True, inplace=True)",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002343",
        "description": ".history.my_streamlit_20240610002343",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002343",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002502",
        "description": ".history.my_streamlit_20240610002502",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002502",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002531",
        "description": ".history.my_streamlit_20240610002531",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002531",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610002916",
        "description": ".history.my_streamlit_20240610002916",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610002916",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003120",
        "description": ".history.my_streamlit_20240610003120",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003120",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003127",
        "description": ".history.my_streamlit_20240610003127",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003127",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003303",
        "description": ".history.my_streamlit_20240610003303",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003303",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003436",
        "description": ".history.my_streamlit_20240610003436",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003436",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003453",
        "description": ".history.my_streamlit_20240610003453",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610003453",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003503",
        "description": ".history.my_streamlit_20240610003503",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610003503",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610003523",
        "description": ".history.my_streamlit_20240610003523",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610003523",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004003",
        "description": ".history.my_streamlit_20240610004003",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004003",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004159",
        "description": ".history.my_streamlit_20240610004159",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004159",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004221",
        "description": ".history.my_streamlit_20240610004221",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004221",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004244",
        "description": ".history.my_streamlit_20240610004244",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004244",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004245",
        "description": ".history.my_streamlit_20240610004245",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004245",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004246",
        "description": ".history.my_streamlit_20240610004246",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004246",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004426",
        "description": ".history.my_streamlit_20240610004426",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004426",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004444",
        "description": ".history.my_streamlit_20240610004444",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004444",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004508",
        "description": ".history.my_streamlit_20240610004508",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004508",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004720",
        "description": ".history.my_streamlit_20240610004720",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004720",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004740",
        "description": ".history.my_streamlit_20240610004740",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004740",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004746",
        "description": ".history.my_streamlit_20240610004746",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004746",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004924",
        "description": ".history.my_streamlit_20240610004924",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004924",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004933",
        "description": ".history.my_streamlit_20240610004933",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610004933",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004950",
        "description": ".history.my_streamlit_20240610004950",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004950",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610004955",
        "description": ".history.my_streamlit_20240610004955",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610004955",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005103",
        "description": ".history.my_streamlit_20240610005103",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005103",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005405",
        "description": ".history.my_streamlit_20240610005405",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005405",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005420",
        "description": ".history.my_streamlit_20240610005420",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005420",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005431",
        "description": ".history.my_streamlit_20240610005431",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610005431",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005433",
        "description": ".history.my_streamlit_20240610005433",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005433",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005636",
        "description": ".history.my_streamlit_20240610005636",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Menghapus kolom 'unnamed: 0' jika ada\nif 'unnamed: 0' in history_df.columns:\n    history_df.drop(columns=['unnamed: 0'], inplace=True)\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610005636",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def draw_charts(df):\n    # Menghapus kolom 'unnamed: 0' jika ada\n    if 'unnamed: 0' in df.columns:\n        df.drop(columns=['unnamed: 0'], inplace=True)\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005711",
        "description": ".history.my_streamlit_20240610005711",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005711",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005938",
        "description": ".history.my_streamlit_20240610005938",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil",
        "detail": ".history.my_streamlit_20240610005938",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610005954",
        "description": ".history.my_streamlit_20240610005954",
        "peekOfCode": "df = load_data_from_mongodb()",
        "detail": ".history.my_streamlit_20240610005954",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010006",
        "description": ".history.my_streamlit_20240610010006",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010006",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010024",
        "description": ".history.my_streamlit_20240610010024",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])",
        "detail": ".history.my_streamlit_20240610010024",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\ndata = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "data = list(collection.find())\n# Konversi _id ke string\nfor document in data:\ndocument['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "document['_id']",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "document['_id'] = str(document['_id'])\ndf = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "df = pd.DataFrame(data)\nreturn df\nSet tata letak halaman dan warna latar belakang\nset_page_layout()\nTampilkan konten berdasarkan pilihan di sidebar\noption = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\nst.title(\"Selamat Datang di Halaman Utama\")\nst.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\nst.title(\"Dataframe\")\n# Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "df = load_data_from_mongodb()\n# Tampilkan data dari MongoDB\nst.dataframe(df)\n# Gambar diagram lingkaran (pie chart) dan tampilkan tabel\ndraw_charts(df)\n# Menambahkan tombol untuk menyimpan data visualisasi ke history\nif st.button('Simpan Data Visualisasi ke History'):\n    st.write(\"Data visualisasi berhasil disimpan ke history.\")\nexcept Exception as e:\n    st.error(f\"Gagal mengambil data dari MongoDB: {e}\")",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "history_df = pd.read_csv('history.csv')\nexcept FileNotFoundError:\nhistory_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "history_df",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010035",
        "description": ".history.my_streamlit_20240610010035",
        "peekOfCode": "history_df = pd.DataFrame(columns=['Kategori', 'Jumlah', 'Persentase'])\n# Tampilkan data history\nshow_history(history_df)",
        "detail": ".history.my_streamlit_20240610010035",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010232",
        "description": ".history.my_streamlit_20240610010232",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010232",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010243",
        "description": ".history.my_streamlit_20240610010243",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010243",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010603",
        "description": ".history.my_streamlit_20240610010603",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010603",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010638",
        "description": ".history.my_streamlit_20240610010638",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010638",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610010923",
        "description": ".history.my_streamlit_20240610010923",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610010923",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011000",
        "description": ".history.my_streamlit_20240610011000",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011000",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011108",
        "description": ".history.my_streamlit_20240610011108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            # Gunakan button() untuk menampilkan tombol tambahan hanya ketika opsi Dataframe dipilih\n            if option == 'Dataframe' and st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011121",
        "description": ".history.my_streamlit_20240610011121",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011121",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011158",
        "description": ".history.my_streamlit_20240610011158",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011158",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011538",
        "description": ".history.my_streamlit_20240610011538",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011538",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011550",
        "description": ".history.my_streamlit_20240610011550",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011550",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def draw_charts(df, history_df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011810",
        "description": ".history.my_streamlit_20240610011810",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011810",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def draw_charts(df, history_df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011817",
        "description": ".history.my_streamlit_20240610011817",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011817",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def draw_charts(df):\n    # Menghitung jumlah label 'car' dan 'truck'\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    # Menampilkan total jumlah label\n    total = car + truck\n    # Menyiapkan data untuk diagram\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    # Menyiapkan data untuk tabel",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "def load_data_from_mongodb():\n    # Koneksi ke MongoDB\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    # Ambil data dari koleksi MongoDB dan ubah menjadi DataFrame\n    data = list(collection.find())\n    # Konversi _id ke string\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610011924",
        "description": ".history.my_streamlit_20240610011924",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    # Baca data dari MongoDB",
        "detail": ".history.my_streamlit_20240610011924",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def draw_charts(df):\n    # Kode sebelumnya untuk menggambar diagram dan menampilkan tabel\n# Fungsi untuk menampilkan data history\ndef show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n# Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n# Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211108",
        "description": ".history.my_streamlit_20240610211108",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211108",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def draw_charts(df):\n    # Kode sebelumnya untuk menggambar diagram dan menampilkan tabel\n    # Fungsi untuk menampilkan data history\ndef show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n    # Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def show_history(history_df):\n    # Kode sebelumnya untuk menampilkan data history\n    # Fungsi untuk mengambil data dari MongoDB\ndef load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211152",
        "description": ".history.my_streamlit_20240610211152",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211152",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610211552",
        "description": ".history.my_streamlit_20240610211552",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610211552",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213020",
        "description": ".history.my_streamlit_20240610213020",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213020",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/')\ndef home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213444",
        "description": ".history.my_streamlit_20240610213444",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213444",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/')\ndef home():\n    return jsonify(message=\"Connected to Streamlit backend\")\n# Fungsi untuk mengubah halaman menjadi tampilan yang lebih menarik\ndef set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240610213446",
        "description": ".history.my_streamlit_20240610213446",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240610213446",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240611231242",
        "description": ".history.my_streamlit_20240611231242",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240611231242",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.my_streamlit_20240611231300",
        "description": ".history.my_streamlit_20240611231300",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.my_streamlit_20240611231300",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": ".history.strimlit_20240611231414",
        "description": ".history.strimlit_20240611231414",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": ".history.strimlit_20240611231414",
        "documentation": {}
    },
    {
        "label": "save_to_mongodb",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_to_mongodb(predictions, collection, model, frame_count):\n    for prediction in predictions:\n        for box in prediction.boxes:\n            class_index = int(box.cls[0])\n            class_name = model.names[class_index]\n            timestamp = datetime.now()\n            document = {\n                \"frame_number\": frame_count,\n                \"jenis_kendaraan\": class_name,\n                \"deteksi\": 1,  # Setiap entri dihitung sebagai satu deteksi",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def export_to_csv(collection):\n    # Baca data dari MongoDB\n    try:\n        data = list(collection.find())\n        if not data:\n            print(\"No data found in MongoDB collection.\")\n            return\n        df = pd.DataFrame(data)\n        # Check if necessary columns are in dataframe\n        required_columns = {'jenis_kendaraan', 'date', 'deteksi', 'hari'}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client = MongoClient('mongodb://localhost:27017/')\ndb = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = client['percobaan_data']\ncollection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "collection = db['hasil_deteksi']\n# Inisialisasi model YOLO\ntry:\n    model = YOLO('best.pt')\nexcept Exception as e:\n    print(f\"Error loading model: {e}\")\n    exit()\n# Path video yang akan digunakan (gunakan jalur absolut)\nvideo_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "video_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "video_path = os.path.abspath('video2 (1).mp4')\n# Check if video file exists\nif not os.path.exists(video_path):\n    print(f\"Video file '{video_path}' not found.\")\n    exit()\n# Buka file video\ncap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cap = cv2.VideoCapture(video_path)\nassert cap.isOpened(), \"Error opening video file\"\n# Dapatkan informasi video\nw, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH,\n                                       cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\nregion_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "region_of_interest",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "region_of_interest = [(20, 600), (1700, 604), (1700, 560), (20, 560)]\n# Video writer\nvideo_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "video_writer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "video_writer = cv2.VideoWriter(\n    \"object_counting_output.avi\", cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n# Init Object Counter\ncounter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "counter = object_counter.ObjectCounter()\ncounter.set_args(view_img=True, reg_pts=region_of_interest,\n                 classes_names=model.names, draw_tracks=True)\nframe_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "frame_count",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "frame_count = 0\n# Proses setiap frame\nwhile cap.isOpened():\n    success, im0 = cap.read()\n    if not success:\n        print(\"Video frame is empty or video processing has been successfully completed.\")\n        break\n    tracks = model.track(im0, persist=True, show=False)\n    im0 = counter.start_counting(im0, tracks)\n    video_writer.write(im0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "set_page_layout",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def set_page_layout():\n    st.markdown(\n        \"\"\"\n        <style>\n        .reportview-container {\n            background: linear-gradient(135deg, #f3ec78 0%, #af4261 100%);\n            color: #333333;\n        }\n        .sidebar .sidebar-content {\n            background: linear-gradient(135deg, #232526 0%, #414345 100%);",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "draw_charts",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def draw_charts(df):\n    car = df[df['jenis_kendaraan'] == 'car'].shape[0]\n    truck = df[df['jenis_kendaraan'] == 'truck'].shape[0]\n    total = car + truck\n    labels = ['Car', 'Truck']\n    sizes = [car, truck]\n    persentase_cars = car / total * 100 if total > 0 else 0\n    persentase_trucks = truck / total * 100 if total > 0 else 0\n    data = {\n        'Kategori': ['Car', 'Truck'],",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def show_history(history_df):\n    if history_df.empty:\n        st.write(\"Belum ada data history yang tersimpan.\")\n    else:\n        st.write(\"### History\")\n        for index, row in history_df.iterrows():\n            if st.button(f\"Hapus Baris {index}\"):\n                history_df.drop(index, inplace=True)\n                history_df.to_csv('history.csv', index=False)\n                st.success(f\"Baris {index} berhasil dihapus dari history.\")",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "load_data_from_mongodb",
        "kind": 2,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "def load_data_from_mongodb():\n    client = MongoClient(\"mongodb://localhost:27017/\")\n    db = client[\"percobaan_data\"]\n    collection = db[\"hasil_deteksi\"]\n    data = list(collection.find())\n    for document in data:\n        document['_id'] = str(document['_id'])\n    df = pd.DataFrame(data)\n    return df\n# Set tata letak halaman dan warna latar belakang",
        "detail": "my_streamlit",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": "my_streamlit",
        "description": "my_streamlit",
        "peekOfCode": "option = st.sidebar.selectbox(\n    'Silakan pilih:',\n    ('Home', 'Dataframe', 'History')\n)\nif option == 'Home' or option == '':\n    st.title(\"Selamat Datang di Halaman Utama\")\n    st.write(\"Di sini Anda dapat memilih untuk melihat data atau visualisasi.\")\nelif option == 'Dataframe':\n    st.title(\"Dataframe\")\n    try:",
        "detail": "my_streamlit",
        "documentation": {}
    }
]